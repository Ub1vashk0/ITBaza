// <auto-generated />
using System;
using ITBaza.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITBaza.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITBaza.Models.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceRoleId");

                    b.ToTable("Access", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.AccessOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("PersonId");

                    b.ToTable("AccessOperation", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Division", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.MobileOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Corporation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("MobileOperator", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DismissalDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonalPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PlacementId")
                        .HasColumnType("int");

                    b.Property<int?>("VacationId")
                        .HasColumnType("int");

                    b.Property<string>("WorkType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlacementId");

                    b.HasIndex("VacationId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("Pin1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pin2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Puk1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Puk2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SimSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("PhoneNumber", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.PhoneNumberOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    //b.Property<int?>("RoleId")
                    //    .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("RoleId");

                    b.ToTable("PhoneNumberOperation", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Placement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Office")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Placement", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.ResourceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceRole", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ResourceType", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InfoAccessRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Login" }, "UQ__SystemUs__5E55825BAEE17D73")
                        .IsUnique();

                    b.ToTable("SystemUser", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Vacation", (string)null);
                });

            modelBuilder.Entity("ITBaza.Models.Access", b =>
                {
                    b.HasOne("ITBaza.Models.Resource", "Resource")
                        .WithMany("Accesses")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_Access_Resource");

                    b.HasOne("ITBaza.Models.ResourceRole", "ResourceRole")
                        .WithMany("Accesses")
                        .HasForeignKey("ResourceRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Access_ResourceRole");

                    b.Navigation("Resource");

                    b.Navigation("ResourceRole");
                });

            modelBuilder.Entity("ITBaza.Models.AccessOperation", b =>
                {
                    b.HasOne("ITBaza.Models.Access", "Access")
                        .WithMany("AccessOperations")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessOperation_Access");

                    b.HasOne("ITBaza.Models.SystemUser", "Executor")
                        .WithMany("AccessOperations")
                        .HasForeignKey("ExecutorId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessOperation_SystemUser");

                    b.HasOne("ITBaza.Models.Person", "Person")
                        .WithMany("AccessOperations")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessOperation_Person");

                    b.Navigation("Access");

                    b.Navigation("Executor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ITBaza.Models.Division", b =>
                {
                    b.HasOne("ITBaza.Models.Department", "Department")
                        .WithMany("Divisions")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Division_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITBaza.Models.MobileOperator", b =>
                {
                    b.HasOne("ITBaza.Models.Country", "IdCountryNavigation")
                        .WithMany("MobileOperators")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("FK_MobileOperator_Country");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("ITBaza.Models.Person", b =>
                {
                    b.HasOne("ITBaza.Models.Placement", "Placement")
                        .WithMany("People")
                        .HasForeignKey("PlacementId")
                        .HasConstraintName("FK_Person_Placement");

                    b.HasOne("ITBaza.Models.Vacation", "Vacation")
                        .WithMany("People")
                        .HasForeignKey("VacationId")
                        .HasConstraintName("FK_Person_Vacation");

                    b.Navigation("Placement");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("ITBaza.Models.PhoneNumber", b =>
                {
                    b.HasOne("ITBaza.Models.MobileOperator", "Operator")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OperatorId")
                        .HasConstraintName("FK_PhoneNumber_MobileOperator");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("ITBaza.Models.PhoneNumberOperation", b =>
                {
                    b.HasOne("ITBaza.Models.SystemUser", "Executor")
                        .WithMany("PhoneNumberOperations")
                        .HasForeignKey("ExecutorId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumberOperation_SystemUser");

                    b.HasOne("ITBaza.Models.Person", "Person")
                        .WithMany("PhoneNumberOperations")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumberOperation_Person");

                    b.HasOne("ITBaza.Models.PhoneNumber", "PhoneNumber")
                        .WithMany("PhoneNumberOperations")
                        .HasForeignKey("PhoneNumberId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumberOperation_PhoneNumber");

                    b.HasOne("ITBaza.Models.Role", null)
                        .WithMany("PhoneNumberOperations")
                        .HasForeignKey("RoleId");

                    b.Navigation("Executor");

                    b.Navigation("Person");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("ITBaza.Models.Placement", b =>
                {
                    b.HasOne("ITBaza.Models.Country", "Country")
                        .WithMany("Placements")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Placement_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ITBaza.Models.Resource", b =>
                {
                    b.HasOne("ITBaza.Models.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Resource_ResourceType");

                    b.HasOne("ITBaza.Models.Person", "ResponsiblePerson")
                        .WithMany("Resources")
                        .HasForeignKey("ResponsiblePersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Resource_Person");

                    b.Navigation("ResourceType");

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("ITBaza.Models.ResourceRole", b =>
                {
                    b.HasOne("ITBaza.Models.Resource", "Resource")
                        .WithMany("ResourceRoles")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_ResourceRole_Resource");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ITBaza.Models.SystemUser", b =>
                {
                    b.HasOne("ITBaza.Models.Role", "Role")
                        .WithMany("SystemUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_SystemUser_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITBaza.Models.Vacation", b =>
                {
                    b.HasOne("ITBaza.Models.Department", "Department")
                        .WithMany("Vacations")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Vacation_Department");

                    b.HasOne("ITBaza.Models.Division", "Division")
                        .WithMany("Vacations")
                        .HasForeignKey("DivisionId")
                        .IsRequired()
                        .HasConstraintName("FK_Vacation_Division");

                    b.Navigation("Department");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("ITBaza.Models.Access", b =>
                {
                    b.Navigation("AccessOperations");
                });

            modelBuilder.Entity("ITBaza.Models.Country", b =>
                {
                    b.Navigation("MobileOperators");

                    b.Navigation("Placements");
                });

            modelBuilder.Entity("ITBaza.Models.Department", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("ITBaza.Models.Division", b =>
                {
                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("ITBaza.Models.MobileOperator", b =>
                {
                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("ITBaza.Models.Person", b =>
                {
                    b.Navigation("AccessOperations");

                    b.Navigation("PhoneNumberOperations");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ITBaza.Models.PhoneNumber", b =>
                {
                    b.Navigation("PhoneNumberOperations");
                });

            modelBuilder.Entity("ITBaza.Models.Placement", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("ITBaza.Models.Resource", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("ResourceRoles");
                });

            modelBuilder.Entity("ITBaza.Models.ResourceRole", b =>
                {
                    b.Navigation("Accesses");
                });

            modelBuilder.Entity("ITBaza.Models.ResourceType", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ITBaza.Models.Role", b =>
                {
                    b.Navigation("PhoneNumberOperations");

                    b.Navigation("SystemUsers");
                });

            modelBuilder.Entity("ITBaza.Models.SystemUser", b =>
                {
                    b.Navigation("AccessOperations");

                    b.Navigation("PhoneNumberOperations");
                });

            modelBuilder.Entity("ITBaza.Models.Vacation", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
